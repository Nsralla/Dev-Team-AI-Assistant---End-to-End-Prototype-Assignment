[
  {
    "file": "code_review_policy.md",
    "start_word": 0,
    "end_word": 269,
    "text": "Code Review Policy The code review process at Harri ensures quality, security, and maintainability of our software. All team members are responsible for following and upholding this policy. 1. Review Requirements Every pull request (PR) must be reviewed by at least one other engineer before merging. The reviewer should be familiar with the relevant codebase or domain. For critical or high-risk changes, two reviewers are required (one must be a team lead). 2. Pull Request Checklist Before requesting a review, ensure that: The PR description is clear and references any related Jira tickets. All CI tests pass (unit, integration, and linting). Documentation and comments are updated as needed. The code adheres to our team\u2019s style guide and standards. Any new dependencies or config changes are documented in the PR. 3. Reviewer Guidelines Begin reviews within 24 hours of assignment. Provide actionable feedback; be constructive and respectful. Test locally when possible, especially for complex features. Approve only when you have full confidence in the change. 4. Common Reasons for Request Changes Incomplete test coverage or failing tests. Lack of clear documentation or unclear code. Security, performance, or maintainability concerns. Violations of team coding standards. 5. After Approval Only team leads or delegated engineers may merge to the main branch. After merging, delete the feature branch unless it is needed for future work. Announce significant changes in #engineering-announcements Slack channel. 6. Resources See 'onboarding_guide.md' for an overview of the review process in new hire onboarding. For questions, contact the Backend Lead (Ahmed Ali) or Frontend Lead (Leen Qasem). Your participation in code reviews helps us deliver reliable, maintainable software at Harri."
  },
  {
    "file": "deployment_process.md",
    "start_word": 0,
    "end_word": 232,
    "text": "Deployment Process This guide details how to safely deploy code changes to Harri\u2019s staging and production environments. All deployments must follow this process to ensure stability and traceability. 1. Prerequisites All code must be merged to the main branch after passing code review. CI/CD checks (unit/integration tests, linting, build) must pass with no errors. All new environment variables or secrets must be updated and documented. 2. Staging Deployment Use the internal deployment tool or run: ./scripts/deploy.sh staging Confirm deployment by checking logs in the deployment dashboard. Run automated smoke tests: pytest --env=staging If failures occur, roll back using: ./scripts/rollback.sh staging Notify your team of deployment status in #deployments Slack channel. 3. Production Deployment Only team leads or authorized engineers may deploy to production. Repeat steps 1\u20134 above, using the production environment: ./scripts/deploy.sh production Double-check the deployment dashboard for errors. After deployment, verify using application health checks. For critical releases, announce completion and status in #engineering-announcements. 4. Troubleshooting & Rollbacks If deployment fails or application is unhealthy, initiate a rollback immediately. Document all incidents and solutions in the incident log (see 'escalation_policy.md'). 5. Best Practices Schedule deployments during low-traffic hours whenever possible. Never deploy directly to production from a personal branch. Maintain up-to-date documentation for all scripts and processes. 6. Support On-call DevOps Engineer: Adam Smith (adam@harri.com) Deployment Tool Guide: [link to internal wiki] For escalations, see 'escalation_policy.md' and contact your team lead."
  },
  {
    "file": "dev_env_setup.md",
    "start_word": 0,
    "end_word": 223,
    "text": "Developer Environment Setup Setting up your development environment at Harri ensures you can build, test, and deploy with confidence. Please follow these steps carefully. If you encounter issues, reach out to the DevOps team. 1. System Requirements Ubuntu 22.04 LTS or MacOS 12+ Python 3.10 or higher Docker Desktop (latest stable) Node.js 18+ (for frontend projects) 8GB+ RAM recommended 2. Initial Setup Steps Clone the main monorepo from GitHub using your SSH key. Repository: git@github.com:harri/main-monorepo.git Create and activate a virtual environment: python3 -m venv venv source venv/bin/activate Copy .env.example to .env and update environment variables with credentials (ask your team lead for secrets). Install dependencies: pip install -r requirements.txt For frontend: cd frontend npm install 3. Dockerized Local Services Ensure Docker is running. Start backend and supporting services: docker-compose up -d Verify services by running: docker ps and check that harri-backend, harri-db, and harri-redis are healthy. 4. Running the App Start the backend server: python main.py Start the frontend (optional): cd frontend npm run dev Access the app at http://localhost:3000 5. Troubleshooting For common Docker issues, see Docker Troubleshooting Guide (https://docs.docker.com/get-docker/). Database connection issues: Check .env credentials and that harri-db is running. Dependency errors: Delete venv, reinstall dependencies, and clear npm cache. 6. Support DevOps: Adam Smith (adam@harri.com) Backend: Ahmed Ali (ahmed@harri.com) Refer to 'deployment_process.md' for information on deploying to staging and production."
  },
  {
    "file": "escalation_policy.md",
    "start_word": 0,
    "end_word": 212,
    "text": "Escalation Policy Harri\u2019s escalation policy outlines how to handle critical issues, outages, and urgent incidents to ensure minimal disruption and timely resolution. 1. When to Escalate Escalate immediately in the following situations: - Production outages or service unavailability - Major security vulnerabilities or breaches - Data loss or corruption - Failed deployments affecting users - Any issue with business or legal impact 2. Immediate Actions Page the current on-call engineer via PagerDuty or phone. Document the incident in Jira and the #incidents Slack channel. Collect logs and initial diagnostics for context. If not resolved within 1 hour, escalate to engineering management and relevant stakeholders. 3. Escalation Matrix First Responder: On-call DevOps Engineer (see 'team_structure.md') Secondary: Backend or Frontend Lead (see 'team_structure.md') Management: Director of Engineering or CTO 4. Communication Guidelines All escalations must be communicated in writing via Slack and email. Provide clear incident summaries, current status, and next steps. Update the incident log throughout the resolution process. 5. Post-Incident After the incident, conduct a blameless postmortem within 48 hours. Document root causes, actions taken, and follow-up tasks in Jira. Update playbooks and documentation to prevent recurrence. 6. Resources For on-call schedule, see 'team_structure.md'. PagerDuty access: [link to internal PagerDuty] Remember: Fast, clear communication is key to effective escalations and rapid recovery."
  },
  {
    "file": "onboarding_guide.md",
    "start_word": 0,
    "end_word": 58,
    "text": "Harri Developer Onboarding Guide Welcome to Harri! As a developer, follow these steps to get started: Request access to our internal tools via IT Helpdesk. Set up your dev environment (see 'dev_env_setup.md'). Join your team's Slack and check the #engineering-announcements channel. Read the code review policy before submitting your first pull request. See 'team_structure.md' for team contact info."
  },
  {
    "file": "team_structure.md",
    "start_word": 0,
    "end_word": 125,
    "text": "Team Structure Below is the current structure for Harri\u2019s engineering organization, including key roles and contact information for each team. Backend Team Ahmed Ali (Backend Lead) \u2014 ahmed@harri.com Fatima Khalil (Senior Backend Engineer) \u2014 fatima@harri.com Sarah Odeh (Backend Engineer) \u2014 sarah@harri.com DevOps Team Adam Smith (DevOps Lead) \u2014 adam@harri.com Lina Salem (DevOps Engineer) \u2014 lina@harri.com Frontend Team Leen Qasem (Frontend Lead) \u2014 leen@harri.com Omar Shalabi (Frontend Engineer) \u2014 omar@harri.com On-Call Rotation This week: Adam Smith (DevOps Lead) Next week: Lina Salem (DevOps Engineer) Management Director of Engineering: Noor Jaber \u2014 noor@harri.com CTO: Hossam Doleh \u2014 hossam@harri.com Communication Channels engineering-announcements (Slack): Company-wide technical updates deployments (Slack): Deployment notifications incidents (Slack): Incident and escalation communication For escalation procedures, see 'escalation_policy.md'. For onboarding or team contacts, see 'onboarding_guide.md'."
  }
]